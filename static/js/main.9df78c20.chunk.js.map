{"version":3,"sources":["components/Button.js","components/ButtonMenu.js","components/SearchBox.js","components/Card.js","components/CardsList.js","components/ContentWindow.js","App.js","serviceWorker.js","index.js"],"names":["Button","_ref","name","onClick","react_default","a","createElement","className","ButtonMenu","names","list","map","item","i","components_Button","key","SearchBox","searchField","input","type","onChange","value","Card","CardsList","arr","components_Card","ContentWindow","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearch","e","setState","target","componentDidMount","fetchData","componentDidUpdate","prevProps","category","results","state","inherits","createClass","_this2","fetch","concat","then","response","json","object","keys","console","log","push","_this$state","filter","toLowerCase","includes","length","components_SearchBox","components_CardsList","Component","App","filterCategory","components_ButtonMenu","components_ContentWindow","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9df78c20.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = ( {name, onClick} ) => {\r\n    return (\r\n    <button\r\n    className=\"f10 link br2 ph3 pv2 mb2 dib bg-transparent menu-button\"\r\n    onClick={onClick}>\r\n            {name}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nconst ButtonMenu = ({ names, onClick }) => {\r\n    const list = names.map((item, i) => {\r\n        return <Button key={i} name={item} onClick={() => onClick(i)} />;\r\n    });\r\n    return <nav>{list}</nav>;\r\n};\r\n\r\nexport default ButtonMenu;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, input }) => {\r\n    return (\r\n        <input type=\"search\" onChange={input} value={searchField}></input>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Card = ({ name }) => {\r\n    return (\r\n        <div className=\"f8 link br2 ph3 pv2 mb2 bg-transparent menu-button\">\r\n            {name}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardsList = ({ list }) => {\r\n    const arr = list.map((item, i) => {\r\n        return <Card key={i} name={item} />;\r\n    });\r\n    return <div>{arr}</div>;\r\n};\r\n\r\nexport default CardsList;\r\n","import React, { Component } from \"react\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport CardsList from \"./CardsList\";\r\n\r\nexport class ContentWindow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchField: \"\",\r\n            results: []\r\n        };\r\n    }\r\n\r\n    onSearch = e => {\r\n        this.setState({\r\n            searchField: e.target.value\r\n        });\r\n    };\r\n\r\n    fetchData() {\r\n        fetch(`https://swapi.co/api/${this.props.category}`)\r\n            .then(response => response.json())\r\n            .then(object => {\r\n                let arr = [];\r\n                object.results.map(item => {\r\n                    let name = Object.keys(item)[0];\r\n                    console.log(name);\r\n                    return arr.push(item[name]);\r\n                });\r\n                console.log(arr);\r\n                this.setState({\r\n                    results: arr\r\n                });\r\n            });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.fetchData();\r\n    }\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n        if (this.props.category !== prevProps.category) {\r\n            this.setState({\r\n                results: []\r\n            })\r\n            this.fetchData();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { searchField, results } = this.state;\r\n        const list = results.filter(name =>\r\n            name.toLowerCase().includes(searchField.toLowerCase())\r\n        );\r\n            return results.length ? (\r\n                <div>\r\n                    <SearchBox\r\n                        searchField={searchField}\r\n                        input={this.onSearch}\r\n                    />\r\n                    <CardsList category={this.props.category} list={list} />\r\n                </div>\r\n            ) :\r\n            <h2>Loading...</h2>\r\n    }\r\n}\r\n\r\nexport default ContentWindow;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ButtonMenu from \"./components/ButtonMenu\";\nimport ContentWindow from \"./components/ContentWindow\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            category: \"\"\n        };\n    }\n\n    names = [\n        \"planets\",\n        \"starships\",\n        \"vehicles\",\n        \"people\",\n        \"films\",\n        \"species\"\n    ];\n\n    filterCategory = i => {\n        this.setState({\n            category: this.names[i]\n        });\n    };\n\n    render() {\n        const { category } = this.state;\n        return category? (\n            <div className=\"App\">\n                <h1>StarWars API</h1>\n                <ButtonMenu\n                    names={this.names}\n                    onClick={i => this.filterCategory(i)}\n                />\n                <ContentWindow category={category} />\n            </div>\n        ) :\n        (\n            <div className=\"App\">\n                <h1>StarWars API</h1>\n                <ButtonMenu\n                    names={this.names}\n                    onClick={i => this.filterCategory(i)}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}